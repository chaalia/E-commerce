// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dErDvWPnyKvMfD5m4jpnKM
// Component: 03VSjVcdHWxO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Value from "../../Value"; // plasmic-import: PJxO9P8cvog/component
import Button from "../../Button"; // plasmic-import: 9mok55OwiDz/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: dErDvWPnyKvMfD5m4jpnKM/projectcss
import * as sty from "./PlasmicEmojiValueProps.module.css"; // plasmic-import: 03VSjVcdHWxO/css

import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: 3GbaBKeXSUMQ/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: OxBpFUQdtlgI/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: ps7eTn4tBj9r/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: bNYoGXg5OGUz/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: s1vhHT8lNgiK/icon

export type PlasmicEmojiValueProps__VariantMembers = {};

export type PlasmicEmojiValueProps__VariantsArgs = {};
type VariantPropType = keyof PlasmicEmojiValueProps__VariantsArgs;
export const PlasmicEmojiValueProps__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEmojiValueProps__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEmojiValueProps__ArgsType;
export const PlasmicEmojiValueProps__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicEmojiValueProps__OverridesType = {
  root?: p.Flex<"section">;
};

export interface DefaultEmojiValuePropsProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicEmojiValueProps__RenderFunc(props: {
  variants: PlasmicEmojiValueProps__VariantsArgs;
  args: PlasmicEmojiValueProps__ArgsType;
  overrides: PlasmicEmojiValueProps__OverridesType;
  dataFetches?: PlasmicEmojiValueProps__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__aG1O1)}
          >
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__dCDrx)}
                  colors={"black" as const}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(defaultcss.all, sty.svg__tEV)}
                      role={"img"}
                    />
                  }
                  rounded={"rounded" as const}
                  size={"large" as const}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__gCPju)}
              icon={
                <PlaneIcon
                  className={classNames(defaultcss.all, sty.svg__vmfF6)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__oaAdJ
                )}
              >
                {"Worldwide shipping"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__wsBou
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </Value>

            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button___3Jpyg)}
                  colors={"black" as const}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(defaultcss.all, sty.svg__bmS3O)}
                      role={"img"}
                    />
                  }
                  rounded={"rounded" as const}
                  size={"large" as const}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value___4XAdO)}
              icon={
                <DocumentIcon
                  className={classNames(defaultcss.all, sty.svg__c0H3N)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__rc6Pw
                )}
              >
                {"30-day guarantee"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__zkeey
                )}
              >
                {"Free return policy."}
              </div>
            </Value>

            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__lkfZj)}
                  colors={"black" as const}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(defaultcss.all, sty.svg__mmaQl)}
                      role={"img"}
                    />
                  }
                  rounded={"rounded" as const}
                  size={"large" as const}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value___4SnG5)}
              icon={
                <LockIcon
                  className={classNames(defaultcss.all, sty.svg__sdF1)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__jkPgf
                )}
              >
                {"Secured payments"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text__cufwK
                )}
              >
                {"We accept major credit cards."}
              </div>
            </Value>
          </p.Stack>
        ),

        value: args.children
      })}
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmojiValueProps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmojiValueProps__VariantsArgs;
    args?: PlasmicEmojiValueProps__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEmojiValueProps__Fetches;
  } & Omit<PlasmicEmojiValueProps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEmojiValueProps__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmojiValueProps__ArgProps,
      internalVariantPropNames: PlasmicEmojiValueProps__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEmojiValueProps__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmojiValueProps";
  } else {
    func.displayName = `PlasmicEmojiValueProps.${nodeName}`;
  }
  return func;
}

export const PlasmicEmojiValueProps = Object.assign(
  // Top-level PlasmicEmojiValueProps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicEmojiValueProps
    internalVariantProps: PlasmicEmojiValueProps__VariantProps,
    internalArgProps: PlasmicEmojiValueProps__ArgProps
  }
);

export default PlasmicEmojiValueProps;
/* prettier-ignore-end */
