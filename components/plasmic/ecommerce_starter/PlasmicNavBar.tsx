// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dErDvWPnyKvMfD5m4jpnKM
// Component: emxQNjUI4uHX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 9mok55OwiDz/component
import TextInput from "../../TextInput"; // plasmic-import: xbxF0x-kKlSF/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: dErDvWPnyKvMfD5m4jpnKM/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: emxQNjUI4uHX/css

import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: xyPyd99u4YK8/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: OxBpFUQdtlgI/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: b9qUPcSJMbtf/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: lKbprLrCMZ1j/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: sQ-4zk9KXgMU/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: 4O64HH73nWu6/icon
import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: ttMgQq8fFo-D/icon

export type PlasmicNavBar__VariantMembers = {
  filled: "filled";
  searchOpen: "searchOpen";
};

export type PlasmicNavBar__VariantsArgs = {
  filled?: SingleBooleanChoiceArg<"filled">;
  searchOpen?: SingleBooleanChoiceArg<"searchOpen">;
};

type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>(
  "filled",
  "searchOpen"
);

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  root?: p.Flex<"section">;
  homeButton?: p.Flex<typeof Button>;
  searchButton?: p.Flex<typeof Button>;
  searchInput?: p.Flex<typeof TextInput>;
  profileButton?: p.Flex<typeof Button>;
  cartButton?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
};

export interface DefaultNavBarProps {
  filled?: SingleBooleanChoiceArg<"filled">;
  searchOpen?: SingleBooleanChoiceArg<"searchOpen">;
  className?: string;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  dataFetches?: PlasmicNavBar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__searchOpen]: hasVariant(variants, "searchOpen", "searchOpen")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.freeBox__jIFb9, {
          [sty.freeBox__filled__jIFb9Udier]: hasVariant(
            variants,
            "filled",
            "filled"
          ),
          [sty.freeBox__searchOpen__jIFb9CY0K]: hasVariant(
            variants,
            "searchOpen",
            "searchOpen"
          )
        })}
      >
        <Button
          data-plasmic-name={"homeButton"}
          data-plasmic-override={overrides.homeButton}
          link={"/" as const}
          showStartIcon={"showStartIcon" as const}
          startIcon={
            <HomeIcon
              className={classNames(defaultcss.all, sty.svg__i4Wg)}
              role={"img"}
            />
          }
        >
          {"Home"}
        </Button>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__jUiqW, {
            [sty.freeBox__searchOpen__jUiqWcY0K]: hasVariant(
              variants,
              "searchOpen",
              "searchOpen"
            )
          })}
        >
          {(hasVariant(variants, "searchOpen", "searchOpen") ? false : true) ? (
            <Button
              data-plasmic-name={"searchButton"}
              data-plasmic-override={overrides.searchButton}
              className={classNames("__wab_instance", {
                [sty.searchButton__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              iconOnly={"iconOnly" as const}
              link={"/category" as const}
              startIcon={
                <SearchIcon
                  className={classNames(defaultcss.all, sty.svg___15Oqk)}
                  role={"img"}
                />
              }
            >
              {"Menu"}
            </Button>
          ) : null}
          {(hasVariant(variants, "searchOpen", "searchOpen") ? true : true) ? (
            <TextInput
              data-plasmic-name={"searchInput"}
              data-plasmic-override={overrides.searchInput}
              className={classNames("__wab_instance", sty.searchInput, {
                [sty.searchInput__searchOpen]: hasVariant(
                  variants,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              placeholder={"Search..." as const}
            />
          ) : null}

          <Button
            data-plasmic-name={"profileButton"}
            data-plasmic-override={overrides.profileButton}
            iconOnly={"iconOnly" as const}
            startIcon={
              <ProfileIcon
                className={classNames(defaultcss.all, sty.svg__ob7IN)}
                role={"img"}
              />
            }
          >
            {"Menu"}
          </Button>

          <div className={classNames(defaultcss.all, sty.freeBox__w3V0E)}>
            <Button
              data-plasmic-name={"cartButton"}
              data-plasmic-override={overrides.cartButton}
              colors={"white" as const}
              link={"/cart" as const}
              rounded={"rounded" as const}
              showStartIcon={"showStartIcon" as const}
              startIcon={
                <CartIcon
                  className={classNames(defaultcss.all, sty.svg__jBkbI)}
                  role={"img"}
                />
              }
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.text,
                  {
                    [sty.text__filled]: hasVariant(variants, "filled", "filled")
                  }
                )}
              >
                {hasVariant(variants, "filled", "filled") ? "1" : "0"}
              </div>
            </Button>
          </div>
        </p.Stack>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeButton",
    "searchButton",
    "searchInput",
    "profileButton",
    "cartButton",
    "text"
  ],
  homeButton: ["homeButton"],
  searchButton: ["searchButton"],
  searchInput: ["searchInput"],
  profileButton: ["profileButton"],
  cartButton: ["cartButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  homeButton: typeof Button;
  searchButton: typeof Button;
  searchInput: typeof TextInput;
  profileButton: typeof Button;
  cartButton: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavBar__Fetches;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeButton: makeNodeComponent("homeButton"),
    searchButton: makeNodeComponent("searchButton"),
    searchInput: makeNodeComponent("searchInput"),
    profileButton: makeNodeComponent("profileButton"),
    cartButton: makeNodeComponent("cartButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
